Networks Computer Networks Class Implementation of a Reliable File Transfer Service Over the UDP Transport Service Objective The purpose of this assignment is to implement a reliable File Transfer Protocol (FTP) service over the UDP transport service. This project will help you to understand some of the important issues in implementing reliable data transfer protocols. You will write the reliable FTP client and server programs based on an Alternating Bit Protocol (ABP) that will communicate over the College of Engineering LAN. You will also write a gremlin function that will simulate unreliable networks which will corrupt and lose packets. You will also learn other important functions in computer networks: (1) implementation of segmentation and re-assembly of long messages, (2) detecting errors in the received packets, (3) recovery from lost packets, and (4) emulation of packet errors generation and detection. Overview In this project you will implement a reliable FTP client and server programs that must be written in C or C++ and execute correctly in the COE and tux Linus computers. You will also implement segmentation and re-assembly function, an error detection function and a gremlin function (that can corrupt packets with a specified probability and lose packets). The overview of these software components is show in Figure 1 below. The reliable FTP client and server program must have the following features, including an alternating bit protocol to ensure that the packets are received reliably. The FTP client initiates the communication by sending an FTP request to the FTP server at a specific IP address, using on the port numbers that are assigned to your group. You will only implement the GET command of the FTP protocol, where the FTP client will send a FTP request to the FTP server to transfer a data file from the server to the client. The FTP server will retrieve the requested file stored in its file server. The FTP request message will be of the following form:GET TestFile The file, TestFile, to be transferred is originally stored in the local secondary storage of the server host. When the FTP server receives the GET request from the FTP client, the FTP server first reads the file and puts them in a buffer and sends the content of the buffer to the FTP client. Since the requested file may be large, the server application will use the segmentation function to partition the file into smaller segments that will fit into a packet of size allowable by the network. Each segment is then placed into a 256-byte packet that is allowed by the network. The packet must contain a header that contains information for error detection and other protocol information. You may design your own header fields that are of reasonable sizes. Another field that must be in the header is a sequence number, which alternates between 0 and 1. The packet is then passed to the error detection function which, at the server process, will compute the checksum and place the checksum in the header. The packet is finally passed through the gremlin function before being sent via the UDP socket to the FTP client. The Gremlin function may randomly cause errors in some packet and it may randomly drop other packets. This will emulate errors that may be generated by the network links and routers. The file is an ASCII file and must be at least 50 Kbytes in size. The file is sent in 256-byte packets (including the header) until the end of the file is reached. After the server sends each packet, it will wait for a positive acknowledgement form the client before it sends the next packet. The last packet will be padded with NULL character if the remaining data of the file is less than 256 byes. At the end of the file it transmits 1 byte (NULL character) that indicates the end of the file. It will then close the file. Add cout or printf statements in the server programs to print the sequence numbers, ACK/NAK (acknowledgement) and data to indicate that they are sending and receiving the packets correctly, i.e. print each packet (say, only the first 48 bytes of data) that it sends and receives. The reliable FTP server program will respond to reliable client FTP requests. On receiving the GET request, the server will then send the data of the file in 256-byte packets and the client will receive each 256-byte packet in a loop and writes them into a local file sequentially. After the client receives a packet and verifies that it is correct, it will send an acknowledgement. Each packet is processed by the error detection function that will detect possibility of error based on checksum. The packet is then processed by the segmentation and re-assembly function that re-assembles all the segments of the file form the packets received into the original file. When the client receives a 1-byte message with a NULL character, then it knows that the last packet has been received and it closes the file. The server then constructs FTP response messages by putting the status on the header lines. The header line will be of the following form: GET successfully completed Add cout or printf statements in the client programs to print the sequence numbers, ACK/NAK (acknowledgement) and data to indicate that it is receiving and sending the packets correctly, i.e. print each packet (say, only the first 48 bytes of data) that it receives and sends. Alternating Bit Protocol The Alternating Bit Protocol (ABP) allows the server to send error-free data to the client despite unreliable physical networks that can corrupt and lose packets. The server will send one packet at a time and wait for an acknowledgement before sending the next packet. Since packets can be corrupted or lost, the client will need to determine if the packet is corrupted, lost or duplicated. IN order to perform these checks the server will send additional information in the header of each packet. The header of each packet will contain the following information: (1) sequence number (0 or 1), (2) check sum, and (3) acknowledgement (ACK/NAK).
